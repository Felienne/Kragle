
@inproceedings{conway_alice:_1994,
	address = {New York, NY, USA},
	series = {{CHI} '94},
	title = {Alice: {A} {Rapid} {Prototyping} {System} for {Building} {Virtual} {Environments}},
	isbn = {0-89791-651-4},
	shorttitle = {Alice},
	url = {http://doi.acm.org/10.1145/259963.260503},
	doi = {10.1145/259963.260503},
	urldate = {2016-02-02},
	booktitle = {Conference {Companion} on {Human} {Factors} in {Computing} {Systems}},
	publisher = {ACM},
	author = {Conway, Matthew and Pausch, Randy and Gossweiler, Rich and Burnette, Tommy},
	year = {1994},
	pages = {295--296},
	file = {ACM Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\E7XRMC92\\Conway et al. - 1994 - Alice A Rapid Prototyping System for Building Vir.pdf:application/pdf}
}

@inproceedings{pacione_novel_2004,
	title = {A novel software visualisation model to support software comprehension},
	doi = {10.1109/WCRE.2004.7},
	abstract = {Current software visualisation tools do not address the full range of software comprehension requirements. This paper proposes a novel software visualisation model for supporting object-oriented software comprehension that is intended to address the shortcomings of existing tools. We discuss the previous work that prompted us to develop this model. An initial model is then presented, based on multiple levels of abstraction, multiple perspectives of the software system, and the integration of statically and dynamically extracted information. We review the evaluation tasks used in our previous work and those from the software visualisation and comprehension literature to produce a refined set of evaluation tasks. We then use these tasks to perform an initial assessment of the proposed model. The refined model is then defined more formally. Finally, a concrete example of the use of the model to generate abstraction hierarchies is discussed. We conclude that a visualisation model incorporating a hierarchy of interrelated abstraction levels, combined with structural and behavioural perspectives of the software, will provide effective support for software comprehension.},
	booktitle = {11th {Working} {Conference} on {Reverse} {Engineering}, 2004. {Proceedings}},
	author = {Pacione, M.J. and Roper, M. and Wood, M.},
	month = nov,
	year = {2004},
	keywords = {abstraction generation, abstraction levels, Data mining, dynamically extracted information, evaluation task, Large-scale systems, Object oriented modeling, object-oriented programming, object-oriented software comprehension, Poles and towers, program visualisation, Refining, Reverse engineering, Software performance, software support, Software systems, Software tools, software visualisation model, statically extracted information, visualisation tools, visualization},
	pages = {70--79},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\3PU9SVBU\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\7ZZZC3PR\\Pacione et al. - 2004 - A novel software visualisation model to support so.pdf:application/pdf}
}

@book{wolber_app_2011,
	address = {Sebastopol, Calif},
	edition = {1 edition},
	title = {App {Inventor}: {Create} {Your} {Own} {Android} {Apps}},
	isbn = {978-1-4493-9748-7},
	shorttitle = {App {Inventor}},
	abstract = {Yes, you can create your own apps for Android phones—and it's easy to do. This extraordinary book introduces App Inventor for Android, a powerful visual tool that lets anyone build apps for Android-based devices. Learn the basics of App Inventor with step-by-step instructions for more than a dozen fun projects, such as creating location-aware apps, data storage, and apps that include decision-making logic.The second half of the book features an Inventor's manual to help you understand the fundamentals of app building and computer science. App Inventor makes an excellent textbook for beginners and experienced developers alike.Design games and other apps with 2D graphics and animation Create custom multi-media quizzes and study guides Create a custom tour of your city, school, or workplace Use an Android phone to control a LEGO® MINDSTORMS® NXT robot Build location-aware apps by working with your phone’s sensors Explore apps that incorporate information from the Web Learn computer science as you build your apps},
	language = {English},
	publisher = {O'Reilly Media},
	author = {Wolber, David and Abelson, Hal and Spertus, Ellen and Looney, Liz},
	month = may,
	year = {2011}
}

@inproceedings{hermans_automatically_2010,
	title = {Automatically {Extracting} {Class} {Diagrams} from {Spreadsheets}},
	booktitle = {{ECOOP} 2010 - {Object}-{Oriented} {Programming}, 24th {European} {Conference}, {Maribor}, {Slovenia}, {June} 21-25, 2010. {Proceedings}},
	publisher = {Springer},
	author = {Hermans, F. and Pinzger, M. and Deursen, A. van},
	year = {2010},
	pages = {52--75}
}

@inproceedings{moreno_automatic_2014,
	title = {Automatic detection of bad programming habits in scratch: {A} preliminary study},
	shorttitle = {Automatic detection of bad programming habits in scratch},
	doi = {10.1109/FIE.2014.7044055},
	abstract = {Using the Scratch environment as a tool to teach programming skills or develop computational thinking is increasingly common in all levels of education, well-documented case studies from primary school to university can be found. However, there are reports that indicate that students learning to program in this environment show certain habits that are contrary to the basic programming recommendations. In our work as instructors with high school students, we have detected these and other bad practices, such as the repetition of code and object naming, on a regular basis. This paper focuses on verifying whether these issues can generally be found in the Scratch community, by analyzing a large number of projects available on the Scratch community website. To test this hypothesis, we downloaded 100 projects and analyzed them with two plug-ins we developed to automatically detect these bad practices. The plug-ins extend the functionality of the Hairball tool, a static code analyzer for Scratch projects. The results obtained show that, in general, projects in the repository also incur in the investigated malpractices. Along with suggestions for future work, some ideas that might assist to address such situations are proposed in the conclusions of the paper.},
	booktitle = {2014 {IEEE} {Frontiers} in {Education} {Conference} ({FIE})},
	author = {Moreno, J. and Robles, G.},
	month = oct,
	year = {2014},
	keywords = {automatic assessment, bad habits, bad programming habit detection, Communities, Computers, Computer science education, Educational institutions, empirical analysis, learning, programming, Programming profession, Scratch, Scratch community Web site, Scratch repository, visual programming, visual programming language, Web sites},
	pages = {1--4},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\AUHFJH3M\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\5BMDZGTE\\Moreno and Robles - 2014 - Automatic detection of bad programming habits in s.pdf:application/pdf}
}

@inproceedings{hermans_breviz:_2011,
	title = {Breviz: {Spreadsheet} {Visualization} and {Quality} {Analysis}},
	booktitle = {Proceedings of the {EuSpRIG} 2011 {Symposium}},
	author = {Hermans, F. and Pinzger, M. and Deursen, A. van},
	year = {2011},
	pages = {63--72}
}

@article{kamiya_ccfinder:_2002,
	title = {{CCFinder}: a multilinguistic token-based code clone detection system for large scale source code},
	volume = {28},
	number = {7},
	journal = {TSE},
	author = {Kamiya, Toshihiro and Kusumoto, Shinji and Inoue, Katsuro},
	month = jul,
	year = {2002}
}

@inproceedings{jansen_code_2015,
	address = {Bremen, Germany},
	title = {{CODE} {SMELLS} {IN} {SPREADSHEET} {FORMULAS} {REVISITED} {ON} {AN} {INDUSTRIAL} {DATASET}},
	booktitle = {Proceedings of the {International} {Conference} on {Software} {Maintenance} and {Evolution}},
	author = {Jansen, Bas and Hermans, Felienne},
	year = {2015},
	pages = {372--380}
}

@inproceedings{price_comparing_2015,
	address = {New York, NY, USA},
	series = {{ICER} '15},
	title = {Comparing {Textual} and {Block} {Interfaces} in a {Novice} {Programming} {Environment}},
	isbn = {978-1-4503-3630-7},
	url = {http://doi.acm.org/10.1145/2787622.2787712},
	doi = {10.1145/2787622.2787712},
	abstract = {Visual, block-based programming environments present an alternative way of teaching programming to novices and have proven successful in classrooms and informal learning settings. However, few studies have been able to attribute this success to specific features of the environment. In this study, we isolate the most fundamental feature of these environments, the block interface, and compare it directly to its textual counterpart. We present analysis from a study of two groups of novice programmers, one assigned to each interface, as they completed a simple programming activity. We found that while the interface did not seem to affect users' attitudes or perceived difficulty, students using the block interface spent less time off task and completed more of the activity's goals in less time.},
	urldate = {2016-02-02},
	booktitle = {Proceedings of the {Eleventh} {Annual} {International} {Conference} on {International} {Computing} {Education} {Research}},
	publisher = {ACM},
	author = {Price, Thomas W. and Barnes, Tiffany},
	year = {2015},
	keywords = {block programming, drag-and-drop, programming interface},
	pages = {91--99},
	file = {ACM Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\INAPH4VZ\\Price and Barnes - 2015 - Comparing Textual and Block Interfaces in a Novice.pdf:application/pdf}
}

@book{brennan_creative_2014,
	title = {{CREATIVE} {COMPUTING}},
	publisher = {Harvard Graduate School of Education},
	author = {Brennan, Karen and Balch, Christian and Chung, Michelle},
	year = {2014}
}

@article{moha_decor:_2010,
	title = {{DECOR}: {A} {Method} for the {Specification} and {Detection} of {Code} and {Design} {Smells}},
	volume = {36},
	issn = {0098-5589},
	shorttitle = {{DECOR}},
	doi = {10.1109/TSE.2009.50},
	abstract = {Code and design smells are poor solutions to recurring implementation and design problems. They may hinder the evolution of a system by making it hard for software engineers to carry out changes. We propose three contributions to the research field related to code and design smells: (1) DECOR, a method that embodies and defines all the steps necessary for the specification and detection of code and design smells, (2) DETEX, a detection technique that instantiates this method, and (3) an empirical validation in terms of precision and recall of DETEX. The originality of DETEX stems from the ability for software engineers to specify smells at a high level of abstraction using a consistent vocabulary and domain-specific language for automatically generating detection algorithms. Using DETEX, we specify four well-known design smells: the antipatterns Blob, Functional Decomposition, Spaghetti Code, and Swiss Army Knife, and their 15 underlying code smells, and we automatically generate their detection algorithms. We apply and validate the detection algorithms in terms of precision and recall on XERCES v2.7.0, and discuss the precision of these algorithms on 11 open-source systems.},
	number = {1},
	journal = {IEEE Transactions on Software Engineering},
	author = {Moha, N. and Guéhéneuc, Y. and Duchien, L. and Le Meur, A.},
	month = jan,
	year = {2010},
	keywords = {Antipatterns, antipatterns Blob, code detection, Code Smells, code specification, DECOR, design smells, detection, DETEX, domain-specific language, empirical validation, formal specification, functional decomposition, Java., metamodeling, open-source systems, program verification, software quality, Spaghetti code, specification, Swiss army knife},
	pages = {20--36},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\7PDCWS4X\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\X8RHB5WW\\Moha et al. - 2010 - DECOR A Method for the Specification and Detectio.pdf:application/pdf}
}

@inproceedings{alves_deriving_2010,
	title = {Deriving metric thresholds from benchmark data},
	booktitle = {26th {IEEE} {International} {Conference} on {Software} {Maintenance} ({ICSM} 2010)},
	publisher = {IEEE Computer Society},
	author = {Alves, T. L. and Ypma, C. and Visser, J.},
	year = {2010},
	pages = {1--10}
}

@article{hermans_detecting_2014,
	title = {Detecting and refactoring code smells in spreadsheet formulas},
	volume = {20},
	url = {http://link.springer.com/article/10.1007/s10664-013-9296-2},
	number = {2},
	urldate = {2015-10-08},
	journal = {Empirical Software Engineering},
	author = {Hermans, Felienne and Pinzger, Martin and van Deursen, Arie},
	year = {2014},
	pages = {549--575},
	file = {[PDF] from tudelft.nl:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\NG6RTXCU\\Hermans et al. - 2014 - Detecting and refactoring code smells in spreadshe.pdf:application/pdf;Snapshot:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\DWD9764T\\s10664-013-9296-2.html:text/html}
}

@inproceedings{hermans_detecting_2012,
	title = {Detecting and {Visualizing} {Inter}-{Worksheet} {Smells}},
	booktitle = {Proceeding of the 34rd international conference on {Software} engineering ({ICSE} 2012)},
	publisher = {ACM Press},
	author = {Hermans, F. and Pinzger, M. and Deursen, A. van},
	year = {2012},
	note = {to appear},
	keywords = {data flow diagrams, end-user programming, spreadsheets, visualization},
	pages = {451--460}
}

@article{hermans_detecting_2012-1,
	title = {Detecting {Code} {Smells} in {Spreadsheet} {Formulas}},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6405300},
	urldate = {2015-10-08},
	journal = {Proceedings of the International Conference on Software Maintenance (ICSM)},
	author = {Hermans, Felienne and Pinzger, Martin and Deursen, A. V.},
	year = {2012},
	file = {[PDF] from tudelft.nl:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\JR7AENIJ\\Hermans et al. - 2012 - Detecting Code Smells in Spreadsheet Formulas.pdf:application/pdf;Snapshot:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\2K6MQ4HX\\abs_all.html:text/html}
}

@inproceedings{marinescu_detecting_2001,
	title = {Detecting {Design} {Flaws} via {Metrics} in {Object}-{Oriented} {Systems}},
	booktitle = {Proceedings of {TOOLS}},
	publisher = {IEEE Computer Society},
	author = {Marinescu, R.},
	year = {2001},
	pages = {173--182}
}

@inproceedings{quante_dynamic_2008,
	title = {Do {Dynamic} {Object} {Process} {Graphs} {Support} {Program} {Understanding}? - {A} {Controlled} {Experiment}.},
	shorttitle = {Do {Dynamic} {Object} {Process} {Graphs} {Support} {Program} {Understanding}?},
	doi = {10.1109/ICPC.2008.15},
	abstract = {Using automatic program analysis techniques for extracting architectural information and its visualization is widely considered useful for program understanding. However, it has to be empirically validated if a given technique is beneficial in practice. This is usually done by performing a set of case studies. To find out for sure whether a technique really has any effect, controlled experiments have to be conducted. Dynamic object process graphs are one such technique. These graphs describe the control flow of an application from the perspective of a single object. In previous research, we conducted case studies which indicated that they may be useful for program understanding, but this assumption has not been validated so far. We report on a controlled experiment which investigated this question: Does the availability of such graphs support program understanding or not? We describe the research questions that were investigated, the hypotheses, experimental setup, conduction, and discuss the results and lessons learned.},
	booktitle = {The 16th {IEEE} {International} {Conference} on {Program} {Comprehension}, 2008. {ICPC} 2008},
	author = {Quante, J.},
	month = jun,
	year = {2008},
	keywords = {Application software, architectural information, Automatic control, automatic program analysis techniques, controlled experiment, Data mining, dynamic analysis, dynamic object process graphs, Flow graphs, Information analysis, program comprehension, program diagnostics, programming, program understanding, Reverse engineering, Sockets, software architecture, software maintenance, Unified Modeling Language, visualization},
	pages = {73--82},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\92HMH4QG\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\8Z7ND78C\\Quante - 2008 - Do Dynamic Object Process Graphs Support Program U.pdf:application/pdf}
}

@article{moreno-leon_dr._2015,
	title = {Dr. {Scratch}: {Automatic} {Analysis} of {Scratch} {Projects} to {Assess} and {Foster} {Computational} {Thinking}},
	issn = {1578-7680},
	shorttitle = {Dr. {Scratch}},
	url = {https://doaj.org},
	abstract = {DOAJ is an online directory that indexes and provides access to quality open access, peer-reviewed journals.},
	number = {46},
	urldate = {2016-02-11},
	journal = {RED : Revista de Educación a Distancia},
	author = {Moreno-León, Jesús and Robles, Gregorio and Román-González, Marcos},
	month = jan,
	year = {2015},
	pages = {1--23},
	file = {Snapshot:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\SMS9E38J\\13c8569304b64e0a9dbcd422fada856b.html:text/html}
}

@inproceedings{moreno-leon_dr._2015-1,
	address = {New York, NY, USA},
	series = {{WiPSCE} '15},
	title = {Dr. {Scratch}: {A} {Web} {Tool} to {Automatically} {Evaluate} {Scratch} {Projects}},
	isbn = {978-1-4503-3753-3},
	shorttitle = {Dr. {Scratch}},
	url = {http://doi.acm.org/10.1145/2818314.2818338},
	doi = {10.1145/2818314.2818338},
	abstract = {This poster paper presents the operation and the new features of Dr. Scratch, an award-winning gamified web application that allows to perform automatic analysis of Scratch projects to assess the development of computational thinking and detect some bad programming habits that are common in students learning to program in this environment.},
	urldate = {2016-02-11},
	booktitle = {Proceedings of the {Workshop} in {Primary} and {Secondary} {Computing} {Education}},
	publisher = {ACM},
	author = {Moreno-León, Jesús and Robles, Gregorio},
	year = {2015},
	keywords = {Assessment, coding, computational thinking, learning, Scratch},
	pages = {132--133},
	file = {ACM Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\KVX5N54A\\Moreno-León and Robles - 2015 - Dr. Scratch A Web Tool to Automatically Evaluate .pdf:application/pdf}
}

@inproceedings{b._moskal_evaluating_2005,
	title = {Evaluating the {Effectiveness} of a {New} {Instructional} {Approach}},
	booktitle = {Proceedings of the {SIGCSE} technical symposium on {Computer} science education},
	author = {B. Moskal and Cooper, S and Lurie, D.},
	year = {2005}
}

@inproceedings{boe_hairball:_2013,
	address = {New York, NY, USA},
	series = {{SIGCSE} '13},
	title = {Hairball: {Lint}-inspired {Static} {Analysis} of {Scratch} {Projects}},
	isbn = {978-1-4503-1868-6},
	shorttitle = {Hairball},
	url = {http://doi.acm.org/10.1145/2445196.2445265},
	doi = {10.1145/2445196.2445265},
	abstract = {Scratch programming has risen in prominence, not only as a potential language for K-12 computer science, but also in introductory college courses. Unfortunately, grading Scratch programs is time-consuming, requiring manual execution of each program. Automation of this process is greatly complicated by the very reason Scratch is an attractive introductory language--the projects are multimedia in nature, requiring eyes and ears to fully appreciate. We propose Hairball, an automated system that can be used both by a student to point out potential errors or unsafe practices, and by a grader to assist in inspecting the implementation of Scratch programs. Because automatic analysis will not be able to determine the sensory effect, Hairball focuses instead on the implementation, including safe/robust programming practices, providing a "lint-like" tool for Scratch. In this case study, we have created an initial set of Hairball plugins that detect and label instances of initialization of Scratch state, synchronization between say and sound blocks, synchronization between broadcast and receive blocks, and use of timing and loops for complex animation. Our evaluation shows that Hairball is very useful in conjunction with manual analysis. Overall, Hairball was actually slightly more accurate than manual analysis at labeling these instances. Specifically for broadcast/receive, Hairball's analysis correctly classified 99\% of the 432 instances, manual analysis only 81\%. Overall, if Hairball was only used to identify correctly implemented instances, with manual analysis for the remainder, it would remove 76\% of the instances for the manual analysis and assist in the rest, with a false positive rate of less than 0.5\%.},
	urldate = {2016-02-11},
	booktitle = {Proceeding of the 44th {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {ACM},
	author = {Boe, Bryce and Hill, Charlotte and Len, Michelle and Dreschler, Greg and Conrad, Phillip and Franklin, Diana},
	year = {2013},
	keywords = {automated assessment, Scratch, static analysis},
	pages = {215--220},
	file = {ACM Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\6B7C9F8C\\Boe et al. - 2013 - Hairball Lint-inspired Static Analysis of Scratch.pdf:application/pdf}
}

@inproceedings{lange_interactive_2007,
	title = {Interactive {Views} to {Improve} the {Comprehension} of {UML} {Models} - {An} {Experimental} {Validation}},
	doi = {10.1109/ICPC.2007.23},
	abstract = {Software development is becoming more and more model-centric. As a result models are used for a large variety of purposes, such as quality analysis, understanding, and maintenance. We argue that the UML and related existing tooling does not offer sufficient support to the developer to understand the models and evaluate their quality. We have proposed and implemented a collection of views to increase model understanding: MetaView, ContextView, MetricView, and UML-City-View. The purpose of this experiment is to validate whether there is a difference between the proposed views and the existing views with respect to comprehension correctness and comprehension effort. The comprehension task performed by the subjects was to answer a questionnaire about a model. 100 MSc students with relevant background knowledge have participated in the experiment. The results are statistically significant and show that the correctness is improved by 4.5\% and that the time needed is reduced by 20\%.},
	booktitle = {15th {IEEE} {International} {Conference} on {Program} {Comprehension}, 2007. {ICPC} '07},
	author = {Lange, C.F.J. and Chaudron, M.R.V.},
	month = jun,
	year = {2007},
	keywords = {Context modeling, ContextView, Data analysis, Data mining, Data visualization, Information analysis, MetaView, MetricView, programming, program verification, Reverse engineering, Software design, software development, Software Engineering, software maintenance, UML models, Unified Modeling Language},
	pages = {221--230},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\EP46JIKT\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\J25SPPHK\\Lange and Chaudron - 2007 - Interactive Views to Improve the Comprehension of .pdf:application/pdf}
}

@inproceedings{meerbaum-salant_learning_2010,
	address = {New York, NY, USA},
	series = {{ICER} '10},
	title = {Learning {Computer} {Science} {Concepts} with {Scratch}},
	isbn = {978-1-4503-0257-9},
	url = {http://doi.acm.org/10.1145/1839594.1839607},
	doi = {10.1145/1839594.1839607},
	abstract = {Scratch is a visual programming environment that is widely used by young people. We investigated if Scratch can be used to teach concepts of computer science. We developed new learning materials for middle-school students that were designed according to the constructionist philosophy of Scratch and evaluated them in two schools. The classes were normal classes, not extracurricular activities whose participants are self-selected. Questionnaires and a test were constructed based upon a novel combination of the Revised Bloom Taxonomy and the SOLO taxonomy. These quantitative instruments were augmented with a qualitative analysis of observations within the classes. The results showed that in general students could successfully learn important concepts of computer science, although there were some problems with initialization, variables and concurrency; these problems can be overcome by modifications to the teaching process.},
	urldate = {2016-02-02},
	booktitle = {Proceedings of the {Sixth} {International} {Workshop} on {Computing} {Education} {Research}},
	publisher = {ACM},
	author = {Meerbaum-Salant, Orni and Armoni, Michal and Ben-Ari, Mordechai (Moti)},
	year = {2010},
	keywords = {bloom's taxonomy, concurrency, middle schools, Scratch, solo taxonomy},
	pages = {69--76},
	file = {ACM Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\KFMWSW9Z\\Meerbaum-Salant et al. - 2010 - Learning Computer Science Concepts with Scratch.pdf:application/pdf}
}

@book{lanza_object-oriented_2006,
	title = {Object-{Oriented} {Metrics} in {Practice}},
	isbn = {3-540-24429-8},
	url = {http://www.springer.com/alert/urltracking.do?id=5907042},
	author = {Lanza, M. and Marinescu, R.},
	year = {2006},
	keywords = {metrics, object-oriented}
}

@book{fowler_refactoring:_1999,
	address = {Boston, MA, USA},
	title = {Refactoring: improving the design of existing code},
	isbn = {0-201-48567-2},
	publisher = {Addison-Wesley Longman Publishing Co., Inc.},
	author = {Fowler, M.},
	year = {1999}
}

@inproceedings{stolee_refactoring_2011,
	address = {New York, NY, USA},
	series = {{ICSE} '11},
	title = {Refactoring {Pipe}-like {Mashups} for {End}-user {Programmers}},
	isbn = {978-1-4503-0445-0},
	url = {http://doi.acm.org/10.1145/1985793.1985805},
	doi = {10.1145/1985793.1985805},
	abstract = {Mashups are becoming increasingly popular as end users are able to easily access, manipulate, and compose data from many web sources. We have observed, however, that mashups tend to suffer from deficiencies that propagate as mashups are reused. To address these deficiencies, we would like to bring some of the benefits of software engineering techniques to the end users creating these programs. In this work, we focus on identifying code smells indicative of the deficiencies we observed in web mashups programmed in the popular Yahoo! Pipes environment. Through an empirical study, we explore the impact of those smells on end-user programmers and observe that users generally prefer mashups without smells. We then introduce refactorings targeting those smells, reducing the complexity of the mashup programs, increasing their abstraction, updating broken data sources and dated components, and standardizing their structures to fit the community development patterns. Our assessment of a large sample of mashups shows that smells are present in 81\% of them and that the proposed refactorings can reduce the number of smelly mashups to 16\%, illustrating the potential of refactoring to support the thousands of end users programming mashups.},
	urldate = {2016-02-10},
	booktitle = {Proceedings of the 33rd {International} {Conference} on {Software} {Engineering}},
	publisher = {ACM},
	author = {Stolee, Kathryn T. and Elbaum, Sebastian},
	year = {2011},
	keywords = {end user software engineering, refactoring, web mashups},
	pages = {81--90},
	file = {ACM Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\7RE8UJJX\\Stolee and Elbaum - 2011 - Refactoring Pipe-like Mashups for End-user Program.pdf:application/pdf}
}

@article{resnick_scratch:_2009,
	title = {Scratch: {Programming} for {All}},
	volume = {52},
	issn = {0001-0782},
	shorttitle = {Scratch},
	url = {http://doi.acm.org/10.1145/1592761.1592779},
	doi = {10.1145/1592761.1592779},
	abstract = {"Digital fluency" should mean designing, creating, and remixing, not just browsing, chatting, and interacting.},
	number = {11},
	urldate = {2016-02-02},
	journal = {Commun. ACM},
	author = {Resnick, Mitchel and Maloney, John and Monroy-Hernández, Andrés and Rusk, Natalie and Eastmond, Evelyn and Brennan, Karen and Millner, Amon and Rosenbaum, Eric and Silver, Jay and Silverman, Brian and Kafai, Yasmin},
	month = nov,
	year = {2009},
	pages = {60--67},
	file = {ACM Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\T47CR958\\Resnick et al. - 2009 - Scratch Programming for All.pdf:application/pdf}
}

@inproceedings{chambers_smell-driven_2013,
	title = {Smell-driven performance analysis for end-user programmers},
	doi = {10.1109/VLHCC.2013.6645261},
	abstract = {End-user programmers such as scientists and engineers often adopt a visual domain-specific language due to its easy learnability, but then they later encounter problems when trying to create high-performance programs. In response, they typically have had to resort to learning and using general textual languages such as C or Fortran as a supplement or replacement for the visual language. This paper proposes a technique, called Smell-driven performance analysis, for helping end-user programmers to overcome performance problems without leaving the visual dataflow paradigm. The technique involves statically analyzing programs to heuristically detect areas with potential performance problems (“bad smells”), alerting enduser programmers about problems, and advising on how to fix those problems. We have implemented a prototype for applying this technique and conducted a user study in which end-user programmers diagnosed performance problems. The experiment showed our technique increased participants' success rates at finding problems and decreased the time required for finding solutions. Qualitatively, 92\% of participants said our technique was helpful, and they listed numerous specific benefits provided.},
	booktitle = {2013 {IEEE} {Symposium} on {Visual} {Languages} and {Human}-{Centric} {Computing} ({VL}/{HCC})},
	author = {Chambers, C. and Scaffidi, C.},
	month = sep,
	year = {2013},
	keywords = {Arrays, Detectors, end-user programmers, end-user programming, Fortran, high-performance programs, Instruments, performance, Performance analysis, program analysis, program diagnostics, Prototypes, smell-driven performance analysis, specification languages, textual languages, visual dataflow paradigm, visual domain-specific language, visualization, visual language, visual languages},
	pages = {159--166},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\CXSHWWRZ\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\4RIZ34JC\\Chambers and Scaffidi - 2013 - Smell-driven performance analysis for end-user pro.pdf:application/pdf}
}

@book{marco_structured_1979,
	title = {Structured {Analysis} {And} {System} {Specification}},
	isbn = {0-13-854380-1},
	publisher = {Prentice Hall PTR},
	author = {Marco, T. De},
	year = {1979}
}

@inproceedings{hermans_supporting_2011,
	address = {Waikiki, Honolulu, HI, USA},
	title = {Supporting professional spreadsheet users by generating leveled dataflow diagrams},
	isbn = {978-1-4503-0445-0},
	booktitle = {Proceeding of the 33rd international conference on {Software} engineering ({ICSE} 2011)},
	publisher = {ACM Press},
	author = {Hermans, F. and Pinzger, M. and Deursen, A. van},
	year = {2011},
	keywords = {data flow diagrams, end-user programming, spreadsheets, visualization},
	pages = {451--460}
}

@inproceedings{cooper_teaching_2003,
	address = {New York, NY, USA},
	series = {{SIGCSE} '03},
	title = {Teaching {Objects}-first in {Introductory} {Computer} {Science}},
	isbn = {1-58113-648-X},
	url = {http://doi.acm.org/10.1145/611892.611966},
	doi = {10.1145/611892.611966},
	abstract = {An objects-first strategy for teaching introductory computer science courses is receiving increased attention from CS educators. In this paper, we discuss the challenge of the objects-first strategy and present a new approach that attempts to meet this challenge. The new approach is centered on the visualization of objects and their behaviors using a 3D animation environment. Statistical data as well as informal observations are summarized to show evidence of student performance as a result of this approach. A comparison is made of the pedagogical aspects of this new approach with that of other relevant work.},
	urldate = {2016-02-02},
	booktitle = {Proceedings of the 34th {SIGCSE} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {ACM},
	author = {Cooper, Stephen and Dann, Wanda and Pausch, Randy},
	year = {2003},
	keywords = {3D, animation, CS1, objects-first, pedagogy, visualization},
	pages = {191--195},
	file = {ACM Full Text PDF:C\:\\Users\\Felienne\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\dgizxtry.default\\zotero\\storage\\I5E3I6CR\\Cooper et al. - 2003 - Teaching Objects-first in Introductory Computer Sc.pdf:application/pdf}
}

@inproceedings{olbrich_evolution_2009,
	address = {Los Alamitos, CA, USA},
	title = {The evolution and impact of code smells: {A} case study of two open source systems},
	isbn = {978-1-4244-4842-5},
	doi = {http://doi.ieeecomputersociety.org/10.1109/ESEM.2009.5314231},
	booktitle = {Proceedings of {International} {Symposium} on {Empirical} {Software} {Engineering} and {Measurement}},
	publisher = {IEEE Computer Society},
	author = {Olbrich, S. and Cruzes, D. S. and Basili, V. and Zazworka, N.},
	year = {2009},
	pages = {390--400}
}

@inproceedings{e._glinert_towards_1986,
	title = {“{Towards} "{Second} {Generation}" {Interactive}, {Graphical} {Programming} {Environments},”},
	booktitle = {Proceedings of the {IEEE} {Workshop} on {Visual} {Languages}},
	author = {E. Glinert},
	year = {1986}
}

@inproceedings{Meerbaum_habits_2011,
 author = {Meerbaum-Salant, Orni and Armoni, Michal and Ben-Ari, Mordechai},
 title = {Habits of Programming in Scratch},
 booktitle = {Proceedings of the 16th Annual Joint Conference on Innovation and Technology in Computer Science Education},
 series = {ITiCSE '11},
 year = {2011},
 isbn = {978-1-4503-0697-3},
 location = {Darmstadt, Germany},
 pages = {168--172},
 numpages = {5},
 url = {http://doi.acm.org/10.1145/1999747.1999796},
 doi = {10.1145/1999747.1999796},
 acmid = {1999796},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {habits, middle schools, scratch},
} 

@inproceedings{wilson_evaluation_2012,
  title={Evaluation of computer games developed by primary school children to gauge understanding of programming concepts},
  author={Wilson, Amanda and Hainey, Thomas and Connolly, Thomas},
  booktitle={European Conference on Games Based Learning},
  pages={549},
  year={2012},
  organization={Academic Conferences International Limited}
}
